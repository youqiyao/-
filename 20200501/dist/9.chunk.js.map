{"version":3,"sources":["webpack:///./src/views/system/systemsetting/signalsource.vue","webpack:///signalsource.vue","webpack:///./src/views/system/systemsetting/signalsource.vue?d920","webpack:///./src/views/system/systemsetting/styles/signalsource.less","webpack:///./src/views/system/systemsetting/signalsource.vue?dc22"],"names":[],"mappings":";;;;;;AACA;AACA,uBAAgR;AAChR,uBAAgR;;AAEhR;AACA;AACA;AACA;AACA,yBAAyG;AACzG;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,iDAAiD,IAAI;AACpI,mCAAmC;;AAEnC;AACA,YAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,CAAC;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACwCA;UAEA;gBACA;0BACA;;;sCAGA;8BAGA;AAJA;;4BAKA;6BACA;mCAEA;;kCACA;wBACA;iCAEA;AAbA;AAcA;;;AAIA;;;;AACA;;wCACA;4BACA;AACA;qDACA;qEACA;AACA;AAEA;AAZA;gCAaA;0BACA;+BACA;AACA;;;qDAEA;mDACA;AAEA;AAJA;;AAWA;;;;;;;AACA;;;oCACA;yCACA;gCACA;uBACA;mBACA;uBACA;AACA;AACA;;iEACA;+BACA;iDACA;AACA;AAMA;;;;;;;AACA;;sBACA;;qCAEA;;6BAEA;6BAGA;AAJA;AAFA;wDAOA;2CACA;;qCAEA;oCACA;gCACA;kEAEA;AALA;AAMA;AACA;mCACA;yCACA;AACA;AACA;oEACA;qCACA;AAEA;;AAIA;;;;;AACA;;AACA;sBACA;;qCAEA;;6BAEA;6BAGA;AAJA;AAFA;wDAOA;2CACA;;qCAEA;oCACA;gCACA;kEAEA;AALA;AAMA;AACA;mCACA;oCACA;AACA;AACA;6CACA;;;AACA;AAEA;;AAIA;;;;gDACA;8BACA;kCACA;AACA;AAGA;;;mEACA;wCACA;sCACA;mBACA;sCACA;AACA;AACA;AAGA;;;;AACA;;+CACA;;qCAEA;0BACA;8BACA;+BAEA;AALA;qDAMA;;qCAEA;0BACA;8BACA;+BAEA;AALA;mBAMA;0BACA;qEACA;oDACA;AACA;0BACA;;yCAEA;;wDAEA;8BAGA;AAJA;AAFA;;+CAQA;8CACA;0BACA;AAHA,oCAIA;kEACA;mDACA;;6CAEA;wCACA;0EAEA;AAJA;+BAKA;;mDAEA;sCACA;0CACA;2CAEA;AALA;mCAMA;AACA;;;AACA;yCACA;AACA;AACA;AAGA;;;;AAEA;;8CACA;;qCAEA;0BACA;8BACA;+BAEA;AALA;mBAMA;0BACA;8BACA;qEACA;oDACA;AACA;;+CAEA;8CACA;0BACA;uCACA;AAJA,oCAKA;8BACA;;+CAEA;;uCAEA;kCAGA;AAJA;AAFA;kFAOA;mDACA;;0CAEA;2CACA;wCACA;0EAEA;AALA;+BAMA;;mDAEA;sCACA;0CACA;2CAEA;AALA;mCAMA;AACA;;;AACA;sCACA;AACA;AAEA;;AAIA;;;;0DACA;mCACA;AAEA;;AAGA;;;;AACA;;kFACA;;qCAEA;0BACA;8BACA;+BAEA;AALA;+DAMA;;oCAEA;0BACA;8BACA;+BAEA;AALA;mBAMA;;+CAEA;8CACA;uCACA;8CACA;6DACA;iEACA,kBACA;AACA;AARA;AASA;;8BACA;;+CAEA;;+DAEA;oCAGA;AAJA;AAFA;kEAOA;kDACA;;wCAEA;gEACA;6CACA;4CAEA;AALA;+BAMA;;0CAEA;2CACA;sCACA;mDAEA;AALA;mCAMA;AACA;;;AACA;yCACA;AACA;AAEA;;AAGA;;;;AACA;;+CACA;;qCAEA;0BACA;8BACA;+BAEA;AALA;AAMA;AACA;gDACA;4CACA;0BACA;mBACA;4CACA;0BACA;AACA;;2CAEA;0CACA;mCACA;iDACA;yDACA;4IACA;yCACA;AACA;AACA;AATA;AAUA;;;2CAEA;;qDAEA;gCAGA;AAJA;AAFA;8DAOA;8CACA;;oCAEA;sEACA;yCACA;wCAEA;AALA;2BAMA;;oCAEA;iDACA;yCACA;wCAEA;AALA;+BAMA;AACA;;;AACA;kCACA;AAEA;;AAGA;;;;AACA;;kFACA;;qCAEA;0BACA;8BACA;+BAEA;AALA;2DAMA;;qCAEA;0BACA;8BACA;+BAEA;AALA;mBAMA;;+CAEA;8CACA;0BACA;uCACA;AAJA,oCAKA;8BACA;;+CAEA;;yDAIA;AAHA;AAFA;kEAMA;mDACA;;0CAEA;2CACA;sCACA;wEAEA;AALA;+BAMA;;mDAEA;sCACA;0CACA;2CAEA;AALA;mCAMA;qDACA;AACA;;;AACA;sCACA;AACA;AAEA;;AAGA;;;8EACA;mCACA;AAEA;;AAGA;;;;AACA;;mEACA;+CACA;;qCAEA;0BACA;8BACA;+BAEA;AALA;mBAMA;0BACA;8BACA;kEACA;gCACA;sDACA;2BACA;sEACA;;iDAEA;sCACA;0CACA;2CAEA;AALA;AAMA;AACA;AACA;iDACA;AACA;;+CAEA;8CACA;0BACA;uCACA;AAJA,oCAKA;8BACA;;+CAEA;;uCAEA;kCAGA;AAJA;AAFA;kFAOA;mDACA;;0CAEA;2CACA;wCACA;0EAEA;AALA;+BAMA;;mDAEA;sCACA;0CACA;2CAEA;AALA;mCAMA;AACA;;;AACA;sCACA;AACA;AAEA;;AAKA;;;;;8CACA;4CACA;sDACA;sEACA;AACA;uBACA;AAEA;;wBACA;AACA;kDACA;+BACA;iDACA;;gCAEA;sCACA;kCACA;kCACA;iCACA;uDACA;iEACA;sCAEA;AATA;AAUA;AAEA;;uBACA;mDACA;gCACA;AAEA;;gCACA;yCACA;AACA;sDACA;mCACA;iDACA;4CACA;;wCAEA;8CACA;0CACA;0CACA;kDACA;wCACA;8CAEA;AARA;+BASA;;wCAEA;8CACA;yCACA;0CACA;0CACA;kDACA;wCACA;8CAEA;AATA;AAWA;;2CACA;+CACA;+BACA;6CACA;AACA;kFACA;uDACA;AACA;kCACA;AACA;AACA;AACA;mBACA;AAEA;AAniBA;AAzCA,G;;;;;;;ACzEA,yC;;;;;;;ACAA,yC;;;;;;;ACAA,gBAAgB,mBAAmB,aAAa,0BAA0B;AAC1E;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,C","file":"9.chunk.js","sourcesContent":["\n/* styles */\nrequire(\"!!../../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?minimize!../../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"id\\\":\\\"data-v-458abbf9\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!autoprefixer-loader!less-loader!./styles/signalsource.less\")\nrequire(\"!!../../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?minimize!../../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"id\\\":\\\"data-v-458abbf9\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!autoprefixer-loader!less-loader!../../../../node_modules/vue-loader/lib/selector?type=styles&index=1!./signalsource.vue\")\n\nvar Component = require(\"!../../../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./signalsource.vue\"),\n  /* template */\n  require(\"!!../../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-458abbf9\\\"}!../../../../node_modules/vue-loader/lib/selector?type=template&index=0!./signalsource.vue\"),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\nComponent.options.__file = \"G:\\\\云拼接\\\\客户端\\\\web1.1\\\\wallweb\\\\view_el\\\\src\\\\views\\\\system\\\\systemsetting\\\\signalsource.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key !== \"__esModule\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] signalsource.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (module.hot) {(function () {\n  var hotAPI = require(\"vue-loader/node_modules/vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-458abbf9\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-458abbf9\", Component.options)\n  }\n})()}\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/system/systemsetting/signalsource.vue\n// module id = 403\n// module chunks = 9","<style lang=\"less\" src='./styles/signalsource.less'></style>\r\n<template>\r\n    <div class=\"signalsource\">\r\n        <el-row :gutter=\"16\" style=\"height: 100%;\">\r\n            <!--左半部分 信号源分组列表-->\r\n            <el-col :span=\"24\" style=\"height: 100%;\">\r\n            <div class=\"maintitle\">\r\n                <p>{{$t('信号源分组列表')}}</p>\r\n                 <p>{{$t('对信号进行统一的分类管理')}}</p>\r\n            </div>\r\n            <!--左半部分 信号源分组操作工具栏-->\r\n            <div style=\"width: 31%;float: left;height: 100%;\">\r\n            \t <div class=\"signaltreetools\">\r\n            \t <el-button @click=\"refreshSource\" size=small class=\"table-btn bg-w\"><i class=\"fa fa-refresh\"></i></el-button>\r\n                <el-button class=\"table-btn\" size=small @click=\"addSourceGroup\"><i class=\"el-icon-plus mar-rig\"></i>{{$t('新建')}}</el-button>\r\n                <el-button class=\"table-btn\" size=small @click=\"editSourceGroup\"><i class=\"el-icon-edit mar-rig\"></i>{{$t('编辑')}}</el-button>\r\n                <el-button class=\"table-btn\" size=small @click=\"handleDelSourceGroup\"><i class=\"el-icon-delete mar-rig\"></i>{{$t('删除分组')}}</el-button>\r\n                <el-button class=\"table-btn\" size=small @click=\"handleDelSource\"><i class=\"el-icon-delete mar-rig\"></i>{{$t('移除信源')}}</el-button>\r\n            </div>\r\n            <!--左半部分 信号源分组转树形结构-->\r\n            <div class=\"signaltree\">\r\n                <el-input\r\n                    :placeholder=\"$t('输入关键字进行过滤')\"\r\n                    v-model=\"filterText\">\r\n                </el-input>\r\n                <Tree\r\n                  ref=\"system-signaltree\"\r\n                  :data=\"sourcegroup\"\r\n                  :props=\"defaultProps\"\r\n                  node-key=\"ID\"\r\n                  show-checkbox\r\n                  check-strictly\r\n                  default-expand-all\r\n                  highlight-current\r\n                  :filter-node-method=\"filterSignalNode\"\r\n                  @current-change=\"sourcegroupSelectChange\"\r\n                  >\r\n                </Tree>\r\n            </div>\r\n            </div>\r\n\r\n        <!--</el-col>-->\r\n        <!--右半部分 信号源列表-->\r\n        <!--<el-col :span=\"17\" style=\"height: 100%;\">-->\r\n            <!--<div class=\"maintitle\" >-->\r\n                <!--<p>{{$t('信号源列表')}}</p>-->\r\n            <!--</div>-->\r\n            <div style=\"width: 68%;height: 100%;float: right;\">\r\n            \t  <!--右半部分 信号源操作工具栏-->\r\n            <div class=\"signaltreetools\">\r\n\r\n                <el-button class=\"table-btn\" size=small @click=\"addToSourceGroup\"><i class=\"el-icon-plus mar-rig\"></i>{{$t('添加')}}</el-button>\r\n                <el-button class=\"table-btn\" size=small @click=\"DelSource\"><i class=\"el-icon-delete mar-rig\"></i>{{$t('删除信源')}}</el-button>\r\n            </div>\r\n            <!--右半部分 信号源列表-->\r\n            <div class=\"signaltable\">\r\n                <el-input\r\n                    :placeholder=\"$t('输入关键字进行过滤')\"\r\n                    v-model=\"filterSignalData\">\r\n                </el-input>\r\n                <el-table :row-style=\"rowStyle\" class=\"signaltable_table\" borber highlight-row :data=\"sourceData\" @selection-change=\"sourceSelectChange\">\r\n                    <el-table-column width=\"60\" align=\"center\" type=\"selection\"></el-table-column>\r\n                    <el-table-column property=\"Name\" :label=\"$t('信源名称')\" align=\"left\"></el-table-column>\r\n                </el-table>\r\n            </div>\r\n            </div>\r\n\r\n            </el-col>\r\n        </el-row>\r\n    </div>\r\n</template>\r\n<script>\r\n    export default {\r\n        name: 'signalsource',\r\n        components: { },\r\n        data() {\r\n            return {\r\n                defaultProps: {\r\n                    children: 'Children',                  //指定子树节点的值\r\n                    label: 'Name',                         //指定节点标签为分组信源名称\r\n                },\r\n\r\n                filterText: '',                            //左边信号源分组搜索的关键字\r\n                sourcegroup: [],                           //信号源分组\r\n                selectTreeGroup: null,                     //左边被选中的信号源\r\n\r\n                filterSignalData: '',                      //右边信号源搜索的关键字\r\n                source: [],                                //信号源数据\r\n                selectedSource: null,                      //右边被选中的信号源\r\n            }\r\n        },\r\n        computed: {\r\n            /**\r\n             * 计算过滤筛选出的信源数据\r\n             */\r\n            sourceData: function(){\r\n                if(!this.filterSignalData) {\r\n                    return this.source\r\n                }\r\n                return this.source.filter((val) => {\r\n                    return val.Name.indexOf(this.filterSignalData) !== -1\r\n                })\r\n            }\r\n        },\r\n        created() {\r\n            this.getsource(0, 0)\r\n            this.getsourcegroup(0, 0)\r\n        },\r\n        watch: {\r\n            filterText(val, oldVal) {\r\n                this.$refs['system-signaltree'].filter(val);\r\n            },\r\n        },\r\n        methods: {\r\n            /**\r\n             * 搜索树节点\r\n             * @param  {[type]} value [description]\r\n             * @param  {[type]} data  [description]\r\n             * @return {[type]}       [description]\r\n             */\r\n            rowStyle({ row, rowIndex}) {\r\n                console.log('row=====', row)\r\n                console.log('rowIndex=====', rowIndex)\r\n                if (rowIndex === 0) {\r\n                    return ''\r\n                } else {\r\n                    return ''\r\n                }\r\n            },\r\n            filterSignalNode: function(value, data) {\r\n                if (!value) return true;\r\n                return data.Name.indexOf(value) !== -1;\r\n            },\r\n            /**\r\n             * [获取信源分组信息]\r\n             * @param  {[type]} start [description]\r\n             * @param  {[type]} limit [description]\r\n             * @return {[type]}       [description]\r\n             */\r\n            getsourcegroup: function(start, limit) {\r\n                let url = '/api.v2.do.sourcegroup.get'\r\n                let params = {\r\n                    \"userid\": this.$auth.getuid(),\r\n                    \"page\": {\r\n                        \"start\": start,\r\n                        \"limit\": limit\r\n                    }\r\n                }\r\n                this.$http(url, params).then((res) => {\r\n                    if (res.data.status !== 0) {\r\n                        this.$message({\r\n                            'showClose':'true',\r\n                            'duration':'1500',\r\n                            'type': 'warning',\r\n                            'message': this.$t(this.$msg[res.data.status])\r\n                        })\r\n                        return\r\n                    }\r\n                    if (!res.data.msg) {\r\n                        this.sourcegroup = []\r\n                        return\r\n                    }\r\n                    this.sourcegroup = this.listToTree(res.data.msg.body)\r\n                }).catch((err) => { })\r\n            },\r\n\r\n            /**\r\n             * 信源列表 、pid参数预留 先不云掉 ，\r\n             * @param parentId\r\n             */\r\n            getsource: function (start, limit) {\r\n                //如果是子节点、并且处于打开状态 则收缩\r\n                let url = '/api.v2.do.source.get'\r\n                let params = {\r\n                    \"userid\": this.$auth.getuid(),\r\n                    \"page\":{\r\n                        \"start\": start,\r\n                        \"limit\": limit\r\n                    }\r\n                }\r\n                this.$http(url, params).then((res) => {\r\n                    if (res.data.status !== 0) {\r\n                        this.$message({\r\n                            'showClose':'true',\r\n                            'duration':'1500',\r\n                            'type': 'warning',\r\n                            'message': this.$t(this.$msg[res.data.status])\r\n                        })\r\n                        return\r\n                    }\r\n                    if (!res.data.msg) {\r\n                        this.source = []\r\n                        return\r\n                    }\r\n                    this.source = res.data.msg.body\r\n                }).catch((err) => { console.error(err) })\r\n            },\r\n\r\n            /**\r\n             * [refreshSource 刷新信源列表]\r\n             * @return {[type]} [description]\r\n             */\r\n            refreshSource: function() {\r\n                this.getsource(0, 0)\r\n                this.selectedSource = null\r\n            },\r\n            /*\r\n             * 当前被选中的右边信号源\r\n             */\r\n            sourceSelectChange: function(selection) {\r\n                if (selection.length === 0) {\r\n                    this.selectedSource = null\r\n                } else {\r\n                    this.selectedSource = selection\r\n                }\r\n            },\r\n            /*\r\n             * 右边被选中的信号源添加到左边信源分组中\r\n             */\r\n            addToSourceGroup: function() {\r\n                if(null === this.selectTreeGroup) {\r\n                    this.$message({\r\n                        message: this.$t('请先选择分组'),\r\n                        type: 'warning',\r\n                        duration: 3000,\r\n                        showClose: true,\r\n                    })\r\n                } else if(this.selectedSource === null) {\r\n                    this.$message({\r\n                        message: this.$t('请先选择信号源'),\r\n                        type: 'warning',\r\n                        duration: 3000,\r\n                        showClose: true,\r\n                    })\r\n                } else {\r\n                    let ids = []\r\n                    for(var i = 0; i < this.selectedSource.length; i++) {\r\n                        ids.push(this.selectedSource[i].ID)\r\n                    }\r\n                    let url = '/api.v2.do.source.addtotype'\r\n                    let params = {\r\n                        \"userid\": this.$auth.getuid(),\r\n                        \"body\": {\r\n                            \"GroupID\": this.selectTreeGroup.ID,\r\n                            \"ID\": ids\r\n                        }\r\n                    }\r\n                    this.$confirm(this.$t('确定将所选信源添加到') + '<' + this.selectTreeGroup.Name + '>?', this.$t('提示'), {\r\n                        confirmButtonText: this.$t('确定'),\r\n                        cancelButtonText: this.$t('取消'),\r\n                        type: 'warning'\r\n                    }).then(() => {\r\n                        this.$http(url, params).then(res => {\r\n                            if(res.data.status !== 0) {\r\n                                this.$message({\r\n                                    'showClose':'true',\r\n                                    'type': 'warning',\r\n                                    'message': this.$t(this.$msg[res.data.status])\r\n                                })\r\n                            } else {\r\n                                this.$message({\r\n                                    message: this.$t('添加成功'),\r\n                                    type: 'success',\r\n                                    duration: 1000,\r\n                                    showClose: true,\r\n                                })\r\n                                this.refreshSourceGroup()\r\n                            }\r\n                        }).catch(err => { console.error(err) })\r\n                    }).catch((err) => { })\r\n                }\r\n            },\r\n            /*\r\n             * 右边被选中的信号源删除\r\n             */\r\n            DelSource: function() {\r\n                \r\n                if(this.selectedSource === null) {\r\n                    this.$message({\r\n                        message: this.$t('请先选择信号源'),\r\n                        type: 'warning',\r\n                        duration: 3000,\r\n                        showClose: true,\r\n                    })\r\n                } else  {  \r\n                    let ids = []\r\n                    let groupID = null\r\n                    for (var i = 0; i < this.selectedSource.length; i++) {                        \r\n                        ids.push(this.selectedSource[i].ID)\r\n                    }\r\n                    this.$confirm(this.$t('此操作将永久删除该信源, 是否继续?'), this.$t('提示'), {\r\n                        confirmButtonText: this.$t('确定'),\r\n                        cancelButtonText: this.$t('取消'),\r\n                        type: 'warning',\r\n                        closeOnClickModal: false\r\n                    }).then(() => {\r\n                        let url = '/api.v2.do.source.rmFromType'\r\n                        let params = {\r\n                            \"userid\": this.$auth.getuid(),\r\n                            \"body\": {\r\n                                \"GroupID\": groupID,\r\n                                \"ID\": ids\r\n                            }\r\n                        }\r\n                        this.$http(url, JSON.stringify(params)).then(res => {\r\n                            if(res.data.status !== 0) {\r\n                                this.$message({\r\n                                     duration: 1500,\r\n                                     showClose: true,\r\n                                    'type': 'warning',\r\n                                    'message': this.$t(this.$msg[res.data.status])\r\n                                })\r\n                            } else {\r\n                                this.$message({\r\n                                    message: this.$t('删除成功'),\r\n                                    type: 'success',\r\n                                    duration: 1000,\r\n                                    showClose: true,\r\n                                })\r\n                                this.refreshSource()\r\n                            }\r\n                        }).catch((err) => { console.error(err) })\r\n                    }).catch(() => { })\r\n                }\r\n            },\r\n\r\n            /**\r\n             * [refreshSourceGroup 刷新信号源分组列表]\r\n             * @return {[type]} [description]\r\n             */\r\n            refreshSourceGroup: function() {\r\n                this.getsourcegroup(0, 0)\r\n            },\r\n\r\n            /**\r\n             * [addSourceGroup 新建分组]\r\n             */\r\n            addSourceGroup: function() {\r\n                if ((null === this.selectTreeGroup) || (this.selectTreeGroup.Type !== 1)) {\r\n                    this.$message({\r\n                        message: this.$t('请先选择分组'),\r\n                        type: 'warning',\r\n                        duration: 3000,\r\n                        showClose: true,\r\n                    })\r\n                } else if(this.selectTreeGroup.ID === 4294967295) {\r\n                    this.$message({\r\n                        message: this.$('未分组下不可新建分组'),\r\n                        type: 'warning',\r\n                        duration: 3000,\r\n                        showClose: true,\r\n                    })\r\n                } else {\r\n                    this.$prompt(' ', this.$t('新建分组'), {\r\n                        confirmButtonText: this.$t('确定'),\r\n                        cancelButtonText: this.$t('取消'),\r\n                        closeOnClickModal: false,\r\n                        inputPlaceholder: this.$t('请输入分组名称'),\r\n                        inputValidator: this.$t(function(value) {\r\n                        if(value.length > 12 || value.length == 0)\r\n                            return this.$t('请输入1~12位长度的名称')\r\n                        })\r\n                    }).then(({ value }) => {\r\n                        let url = '/api.v2.do.sourcegroup.add'\r\n                        let params = {\r\n                            \"userid\": this.$auth.getuid(),\r\n                            \"body\": {\r\n                                \"ParentID\": this.selectTreeGroup.ID,\r\n                                \"Name\":value\r\n                            }\r\n                        }\r\n                        this.$http(url, params).then((res) => {\r\n                            if(res.data.status != 0) {\r\n                                this.$message({\r\n                                    'type': 'warning',\r\n                                    'message': this.$msg[res.data.status],\r\n                                    'showClose': true,\r\n                                    'duration': 1500\r\n                                })\r\n                            } else {\r\n                                this.$message({\r\n                                    duration: 1500,\r\n                                    showClose: true,\r\n                                    type: 'success',\r\n                                    message: this.$t('添加成功')\r\n                                });\r\n                                this.refreshSourceGroup()\r\n                            }\r\n                        }).catch((err) => { console.error(err) })\r\n                    }).catch((err) => { })\r\n                }\r\n            },\r\n\r\n            /**\r\n             * 编辑信源分组或者信源\r\n             */\r\n            editSourceGroup: function() {\r\n                if(null === this.selectTreeGroup) {\r\n                    this.$message({\r\n                        message: this.$t('请先选择分组或信源'),\r\n                        type: 'warning',\r\n                        duration: 3000,\r\n                        showClose: true,\r\n                    })\r\n                    return\r\n                }\r\n                if(this.selectTreeGroup.Type == 1) {\r\n                    var message_title = this.$t('编辑分组')\r\n                    var url = '/api.v2.do.sourcegroup.edit'\r\n                } else {\r\n                    var message_title = this.$t('编辑信源')\r\n                    var url = '/api.v2.do.source.edit'\r\n                }\r\n                this.$prompt(' ', message_title, {\r\n                    confirmButtonText: this.$t('确定'),\r\n                    cancelButtonText: this.$t('取消'),\r\n                    closeOnClickModal: false,\r\n                    inputValue: this.selectTreeGroup.Name,\r\n                    inputValidator: this.$t((value) => {\r\n                        if((message_title == this.$t('编辑分组') && value.length > 12) || (message_title == this.$t('编辑分组') && value.length == 0)) {\r\n                            return this.$t('请输入长度为1~12位的名称')\r\n                        }\r\n                    })\r\n                }).then(({ value }) => {\r\n                    var params = {\r\n                        'userid': this.$auth.getuid(),\r\n                        'body': {\r\n                            'ID': this.selectTreeGroup.ID,\r\n                            'Name': value\r\n                        }\r\n                    }\r\n                    this.$http(url, params).then(res => {\r\n                        if(res.data.status != 0) {\r\n                            this.$message({\r\n                                'type': 'warning',\r\n                                'message': this.$t(this.$msg[res.data.status]),\r\n                                'showClose': true,\r\n                                'duration': 1500\r\n                            })\r\n                        } else {\r\n                            this.$message({\r\n                                'type': 'success',\r\n                                'message': this.$t('操作成功'),\r\n                                'showClose': true,\r\n                                'duration': 1500\r\n                            })\r\n                            this.refreshSourceGroup()\r\n                        }\r\n                    }).catch(err => { console.error(err) })\r\n               }).catch(() => { })\r\n            },\r\n\r\n            /**\r\n             * 删除信源分组\r\n             */\r\n            handleDelSourceGroup: function() {\r\n                if((null === this.selectTreeGroup) || (this.selectTreeGroup.Type !== 1)) {\r\n                    this.$message({\r\n                        message: this.$t('请先选择要删除的分组'),\r\n                        type: 'warning',\r\n                        duration: 3000,\r\n                        showClose: true,\r\n                    })\r\n                } else if(0 == this.selectTreeGroup.ParentID) {\r\n                    this.$message({\r\n                        message: this.$t('该分组不能被删除'),\r\n                        type: 'warning',\r\n                        duration: 3000,\r\n                        showClose: true,\r\n                    })\r\n                } else {\r\n                    this.$confirm(this.$t('此操作将永久删除该分组, 是否继续?'), this.$t('提示'), {\r\n                        confirmButtonText: this.$t('确定'),\r\n                        cancelButtonText: this.$t('取消'),\r\n                        type: 'warning',\r\n                        closeOnClickModal: false\r\n                    }).then(() => {\r\n                        let url = '/api.v2.do.sourcegroup.del'\r\n                        let params = {\r\n                            \"userid\": this.$auth.getuid(),\r\n                            \"body\": {\r\n                                \"ID\": this.selectTreeGroup.ID\r\n                            }\r\n                        }\r\n                        this.$http(url, params).then(res => {\r\n                            if(res.data.status !== 0) {\r\n                                this.$message({\r\n                                    duration: 1500,\r\n                                    showClose: true,\r\n                                    type: 'warning',\r\n                                    message: this.$t(this.$msg[res.data.status])\r\n                                })\r\n                            } else {\r\n                                this.$message({\r\n                                    message: this.$t('删除成功'),\r\n                                    type: 'success',\r\n                                    duration: 1000,\r\n                                    showClose: true,\r\n                                })\r\n                                this.refreshSourceGroup()\r\n                                this.selectTreeGroup = null\r\n                            }\r\n                        }).catch((err) => { console.error(err) })\r\n                    }).catch(() => { })\r\n                }\r\n            },\r\n\r\n            /**\r\n             * 获取树形结构当前被选中的子节点\r\n             */\r\n            sourcegroupSelectChange: function(data, node) {\r\n                this.selectTreeGroup = data\r\n            },\r\n\r\n            /**\r\n             * 删除信号源\r\n             */\r\n            handleDelSource: function() {\r\n                let selectNodeSource = this.$refs['system-signaltree'].getCheckedNodes()\r\n                if(0 === selectNodeSource.length) {\r\n                    this.$message({\r\n                        message: this.$t('请先选择信号源'),\r\n                        type: 'warning',\r\n                        duration: 3000,\r\n                        showClose: true,\r\n                    })\r\n                } else {\r\n                    let ids = []\r\n                    let groupID = null\r\n                    for (var i = 0; i < selectNodeSource.length; i++) {\r\n                        if(i == 0) {\r\n                            groupID = selectNodeSource[i].ParentID\r\n                        } else {\r\n                            if(groupID !== selectNodeSource[i].ParentID) {\r\n                                this.$message({\r\n                                    message: this.$t('请先只选择同一个分组里面的信源'),\r\n                                    type: 'warning',\r\n                                    duration: 3000,\r\n                                    showClose: true,\r\n                                })\r\n                                return\r\n                            }\r\n                        }\r\n                        ids.push(selectNodeSource[i].ID)\r\n                    }\r\n                    this.$confirm(this.$t('此操作将永久删除该信源, 是否继续?'), this.$t('提示'), {\r\n                        confirmButtonText: this.$t('确定'),\r\n                        cancelButtonText: this.$t('取消'),\r\n                        type: 'warning',\r\n                        closeOnClickModal: false\r\n                    }).then(() => {\r\n                        let url = '/api.v2.do.source.rmFromType'\r\n                        let params = {\r\n                            \"userid\": this.$auth.getuid(),\r\n                            \"body\": {\r\n                                \"GroupID\": groupID,\r\n                                \"ID\": ids\r\n                            }\r\n                        }\r\n                        this.$http(url, JSON.stringify(params)).then(res => {\r\n                            if(res.data.status !== 0) {\r\n                                this.$message({\r\n                                     duration: 1500,\r\n                                     showClose: true,\r\n                                    'type': 'warning',\r\n                                    'message': this.$t(this.$msg[res.data.status])\r\n                                })\r\n                            } else {\r\n                                this.$message({\r\n                                    message: this.$t('删除成功'),\r\n                                    type: 'success',\r\n                                    duration: 1000,\r\n                                    showClose: true,\r\n                                })\r\n                                this.refreshSourceGroup()\r\n                            }\r\n                        }).catch((err) => { console.error(err) })\r\n                    }).catch(() => { })\r\n                }\r\n            },\r\n\r\n            /**\r\n             * [listToTree 把列表转成树]\r\n             * @param  {[Array]} rows [列表源]\r\n             * @return {[Array]}      [tree]\r\n             */\r\n            listToTree: function(rows){\r\n                function exists(rows, parentId){\r\n                    for(var i = 0; i < rows.length; i++){\r\n                        if (rows[i].ID && rows[i].ID === parentId) return true;\r\n                    }\r\n                    return false;\r\n                }\r\n\r\n                var nodes = [];\r\n                // get the top level nodes\r\n                for(var i = 0; i < rows.length; i++){\r\n                    var row = rows[i];\r\n                    if (!exists(rows, row.ParentID)){\r\n                        nodes.push({\r\n                            ID: row.ID,\r\n                            ParentID: row.ParentID,\r\n                            Type: row.Type,\r\n                            Name: row.Name,\r\n                            Url: row.Url,\r\n                            isLeaf: (row.Type == 1) ? true : false,\r\n                            hideNodeCheckbox: (row.Type == 1) ? true : false,\r\n                            Children: row.Children,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                var toDo = [];\r\n                for (var i = 0; i < nodes.length; i++){\r\n                    toDo.push(nodes[i]);\r\n                }\r\n\r\n                while (toDo.length){\r\n                    var node = toDo.shift();    // the parent node\r\n                    // get the children nodes\r\n                    for(var i = 0; i < rows.length; i++){\r\n                        var row = rows[i];\r\n                        if (row.ParentID == node.ID){\r\n                            if (row.Type === 1) {\r\n                                var child = {\r\n                                    ID: row.ID,\r\n                                    ParentID: row.ParentID,\r\n                                    Type: row.Type,\r\n                                    Name: row.Name,\r\n                                    hideNodeCheckbox: true,\r\n                                    isLeaf: false,\r\n                                    Children: row.Children,\r\n                                }\r\n                            } else {\r\n                                var child = {\r\n                                    ID: row.ID,\r\n                                    ParentID: row.ParentID,\r\n                                    Url: row.Url,\r\n                                    Type: row.Type,\r\n                                    Name: row.Name,\r\n                                    hideNodeCheckbox: false,\r\n                                    isLeaf: true,\r\n                                    Children: row.Children,\r\n                                }\r\n                            }\r\n\r\n                            if (node.Children){\r\n                                node.Children.push(child);\r\n                            } else {\r\n                                node.Children = [child];\r\n                            }\r\n                            node.Children && node.Children.sort(function(next, prev) {\r\n                                return next['Type'] > prev['Type']\r\n                            })\r\n                            toDo.push(child);\r\n                        }\r\n                    }\r\n                }\r\n                return nodes;\r\n            },\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\">\r\n.signaltable{\r\n    background: pink;\r\n    .el-table__body-wrapper{\r\n        background: #0c1917;\r\n    }\r\n}\r\n    .signaltable_table{\r\n        .el-table__row{\r\n            background:#0c1719;\r\n            color:#ccc;\r\n            .is-checked{\r\n                .el-checkbox__inner{\r\n                    background-color:brown;\r\n                    border-color:brown;\r\n                }\r\n            }\r\n            &:hover{\r\n                background:rgb(83, 11, 11);\r\n            }\r\n            &:active{\r\n                background:rgb(161, 15, 15);\r\n            }\r\n            &:focus{\r\n                background:orange;\r\n            }\r\n        }\r\n        // .el-table__row:hover{\r\n        //     background:rgb(83, 11, 11);\r\n        // }\r\n        // .el-table__row:focus{\r\n        //     background:black;\r\n        // }\r\n    }\r\n    .el-tree-node__children{\r\n        .el-tree-node__content{\r\n            // background: red;\r\n        }\r\n        //  .el-tree-node__content:hover{\r\n        //         background: green;\r\n        //     }\r\n    }\r\n    .el-tree-node__content:hover{\r\n\t\t\t\tcolor: #000!important;\r\n\t\t\t\tbackground:darkslategray!important;\r\n            }\r\n            .el-tree-node__content:active{\r\n\t\t\t\tcolor: #000!important;\r\n\t\t\t\tbackground: #7e7e7e!important;\r\n            }\r\n            .is-current:focus{\r\n                // background: #7e7e7e!important;\r\n                .el-tree-node__content{\r\n                    // background: #7e7e7e!important;\r\n                }\r\n            }\r\n            .is-current>.el-tree-node__content{\r\n                background: #7e7e7e!important;\r\n            }\r\n            .el-tree-node:focus>.el-tree-node__content{\r\n                background: #7e7e7e!important;  \r\n            }\r\n</style>\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// signalsource.vue?e69ce3a6","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?minimize!./~/vue-loader/lib/style-compiler?{\"id\":\"data-v-458abbf9\",\"scoped\":false,\"hasInlineConfig\":false}!./~/autoprefixer-loader!./~/less-loader!./~/vue-loader/lib/selector.js?type=styles&index=1!./src/views/system/systemsetting/signalsource.vue\n// module id = 864\n// module chunks = 9","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?minimize!./~/vue-loader/lib/style-compiler?{\"id\":\"data-v-458abbf9\",\"scoped\":false,\"hasInlineConfig\":false}!./~/autoprefixer-loader!./~/less-loader!./src/views/system/systemsetting/styles/signalsource.less\n// module id = 865\n// module chunks = 9","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"signalsource\"\n  }, [_c('el-row', {\n    staticStyle: {\n      \"height\": \"100%\"\n    },\n    attrs: {\n      \"gutter\": 16\n    }\n  }, [_c('el-col', {\n    staticStyle: {\n      \"height\": \"100%\"\n    },\n    attrs: {\n      \"span\": 24\n    }\n  }, [_c('div', {\n    staticClass: \"maintitle\"\n  }, [_c('p', [_vm._v(_vm._s(_vm.$t('信号源分组列表')))]), _vm._v(\" \"), _c('p', [_vm._v(_vm._s(_vm.$t('对信号进行统一的分类管理')))])]), _vm._v(\" \"), _c('div', {\n    staticStyle: {\n      \"width\": \"31%\",\n      \"float\": \"left\",\n      \"height\": \"100%\"\n    }\n  }, [_c('div', {\n    staticClass: \"signaltreetools\"\n  }, [_c('el-button', {\n    staticClass: \"table-btn bg-w\",\n    attrs: {\n      \"size\": \"small\"\n    },\n    on: {\n      \"click\": _vm.refreshSource\n    }\n  }, [_c('i', {\n    staticClass: \"fa fa-refresh\"\n  })]), _vm._v(\" \"), _c('el-button', {\n    staticClass: \"table-btn\",\n    attrs: {\n      \"size\": \"small\"\n    },\n    on: {\n      \"click\": _vm.addSourceGroup\n    }\n  }, [_c('i', {\n    staticClass: \"el-icon-plus mar-rig\"\n  }), _vm._v(_vm._s(_vm.$t('新建')))]), _vm._v(\" \"), _c('el-button', {\n    staticClass: \"table-btn\",\n    attrs: {\n      \"size\": \"small\"\n    },\n    on: {\n      \"click\": _vm.editSourceGroup\n    }\n  }, [_c('i', {\n    staticClass: \"el-icon-edit mar-rig\"\n  }), _vm._v(_vm._s(_vm.$t('编辑')))]), _vm._v(\" \"), _c('el-button', {\n    staticClass: \"table-btn\",\n    attrs: {\n      \"size\": \"small\"\n    },\n    on: {\n      \"click\": _vm.handleDelSourceGroup\n    }\n  }, [_c('i', {\n    staticClass: \"el-icon-delete mar-rig\"\n  }), _vm._v(_vm._s(_vm.$t('删除分组')))]), _vm._v(\" \"), _c('el-button', {\n    staticClass: \"table-btn\",\n    attrs: {\n      \"size\": \"small\"\n    },\n    on: {\n      \"click\": _vm.handleDelSource\n    }\n  }, [_c('i', {\n    staticClass: \"el-icon-delete mar-rig\"\n  }), _vm._v(_vm._s(_vm.$t('移除信源')))])], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"signaltree\"\n  }, [_c('el-input', {\n    attrs: {\n      \"placeholder\": _vm.$t('输入关键字进行过滤')\n    },\n    model: {\n      value: (_vm.filterText),\n      callback: function($$v) {\n        _vm.filterText = $$v\n      },\n      expression: \"filterText\"\n    }\n  }), _vm._v(\" \"), _c('Tree', {\n    ref: \"system-signaltree\",\n    attrs: {\n      \"data\": _vm.sourcegroup,\n      \"props\": _vm.defaultProps,\n      \"node-key\": \"ID\",\n      \"show-checkbox\": \"\",\n      \"check-strictly\": \"\",\n      \"default-expand-all\": \"\",\n      \"highlight-current\": \"\",\n      \"filter-node-method\": _vm.filterSignalNode\n    },\n    on: {\n      \"current-change\": _vm.sourcegroupSelectChange\n    }\n  })], 1)]), _vm._v(\" \"), _c('div', {\n    staticStyle: {\n      \"width\": \"68%\",\n      \"height\": \"100%\",\n      \"float\": \"right\"\n    }\n  }, [_c('div', {\n    staticClass: \"signaltreetools\"\n  }, [_c('el-button', {\n    staticClass: \"table-btn\",\n    attrs: {\n      \"size\": \"small\"\n    },\n    on: {\n      \"click\": _vm.addToSourceGroup\n    }\n  }, [_c('i', {\n    staticClass: \"el-icon-plus mar-rig\"\n  }), _vm._v(_vm._s(_vm.$t('添加')))]), _vm._v(\" \"), _c('el-button', {\n    staticClass: \"table-btn\",\n    attrs: {\n      \"size\": \"small\"\n    },\n    on: {\n      \"click\": _vm.DelSource\n    }\n  }, [_c('i', {\n    staticClass: \"el-icon-delete mar-rig\"\n  }), _vm._v(_vm._s(_vm.$t('删除信源')))])], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"signaltable\"\n  }, [_c('el-input', {\n    attrs: {\n      \"placeholder\": _vm.$t('输入关键字进行过滤')\n    },\n    model: {\n      value: (_vm.filterSignalData),\n      callback: function($$v) {\n        _vm.filterSignalData = $$v\n      },\n      expression: \"filterSignalData\"\n    }\n  }), _vm._v(\" \"), _c('el-table', {\n    staticClass: \"signaltable_table\",\n    attrs: {\n      \"row-style\": _vm.rowStyle,\n      \"borber\": \"\",\n      \"highlight-row\": \"\",\n      \"data\": _vm.sourceData\n    },\n    on: {\n      \"selection-change\": _vm.sourceSelectChange\n    }\n  }, [_c('el-table-column', {\n    attrs: {\n      \"width\": \"60\",\n      \"align\": \"center\",\n      \"type\": \"selection\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"property\": \"Name\",\n      \"label\": _vm.$t('信源名称'),\n      \"align\": \"left\"\n    }\n  })], 1)], 1)])])], 1)], 1)\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (module.hot) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-loader/node_modules/vue-hot-reload-api\").rerender(\"data-v-458abbf9\", module.exports)\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-458abbf9\"}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/views/system/systemsetting/signalsource.vue\n// module id = 897\n// module chunks = 9"],"sourceRoot":""}