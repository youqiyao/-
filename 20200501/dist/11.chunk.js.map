{"version":3,"sources":["webpack:///./src/views/system/systemsetting/nodemanage.vue","webpack:///nodemanage.vue","webpack:///./src/views/system/systemsetting/styles/nodemanage.less","webpack:///./src/views/system/systemsetting/nodemanage.vue?7833"],"names":[],"mappings":";;;;;;AACA;AACA,uBAAgR;;AAEhR;AACA;AACA;AACA;AACA,yBAAyG;AACzG;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,iDAAiD,IAAI;AACpI,mCAAmC;;AAEnC;AACA,YAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,CAAC;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC4EA;;;;0BAEA;;;0BAGA;uBAEA;AAHA;;oBAKA;+BACA;;yBAEA;;AACA;AAEA;AAJA;yBAMA;mCACA;;AACA;AAIA;AAPA;AARA;6BAgBA;4BACA;oBACA;;oBAGA;4BAIA;AALA,aADA;AAxBA;AA+BA;gCACA;aACA;AACA;;;AAEA;8CACA;2BACA;;AAEA;4DACA;oDACA;2CACA;AACA;2DACA;AAGA;;;AACA;;sBACA;4CACA;iEACA;AACA;mBACA;yCACA;AACA;AACA;;AAEA;qCACA;wBACA;AACA;;AAGA;;;;AACA;;sBACA;;qCAEA;+CAEA;AAHA;wDAIA;0CACA;;gCAEA;6CACA;qCACA;oCAEA;AALA;AAMA;AACA;uDACA;oEACA;sEACA;iEACA;6DACA;+BACA;6DACA;AACA;AACA;uBACA;uDACA;AACA;uBACA;qCACA;AAEA;;;AACA;;;6BACA;;0BACA;uCACA;;qCACA;;AAEA;;sBACA;;qCAEA;;qCAIA;AAHA;AAFA;wDAMA;0CACA;;gCAEA;6CACA;qCACA;oCAEA;AALA;AAMA;AACA;;4BAEA;yCACA;iCACA;gCAEA;AALA;qCAMA;AAEA;;AAKA;;;;;;AACA;;sBACA;;qCAEA;;kCAEA;0BAGA;AAJA;AAFA;wDAOA;0CACA;AACA;2BACA;;6CAEA;gCACA;qCACA;oCAEA;AALA;uBAMA;;6CAEA;gCACA;qCACA;oCAEA;AALA;AAMA;;;AACA;AAEA;;AAGA;;;kCACA;;yCACA;;;yCACA;;wCACA;+BACA;;sCACA;;6CAEA;AAEA;;2CACA;+BACA;;sCACA;;6CAEA;AAEA;AAEA;;;AAGA;;;4CACA;gDACA;AAEA;;AAGA;;;wCACA;wBACA;;;AACA;mBACA;AAEA;;AAIA;;;;;AACA;;2BACA;;;;;AACA;oDACA;kDACA;AAEA;AAnLA;AArCA,G;;;;;;;AC5GA,yC;;;;;;;ACAA,gBAAgB,mBAAmB,aAAa,0BAA0B;AAC1E;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,C","file":"11.chunk.js","sourcesContent":["\n/* styles */\nrequire(\"!!../../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?minimize!../../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"id\\\":\\\"data-v-4a67829d\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!autoprefixer-loader!less-loader!./styles/nodemanage.less\")\n\nvar Component = require(\"!../../../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./nodemanage.vue\"),\n  /* template */\n  require(\"!!../../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-4a67829d\\\"}!../../../../node_modules/vue-loader/lib/selector?type=template&index=0!./nodemanage.vue\"),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\nComponent.options.__file = \"G:\\\\云拼接\\\\客户端\\\\web1.1\\\\wallweb\\\\view_el\\\\src\\\\views\\\\system\\\\systemsetting\\\\nodemanage.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key !== \"__esModule\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] nodemanage.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (module.hot) {(function () {\n  var hotAPI = require(\"vue-loader/node_modules/vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-4a67829d\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-4a67829d\", Component.options)\n  }\n})()}\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/system/systemsetting/nodemanage.vue\n// module id = 401\n// module chunks = 11","<style lang=\"less\" src='./styles/nodemanage.less'></style>\r\n<template>\r\n    <div class=\"nodemanage\">\r\n\r\n\t\t\t<el-row>\r\n          <el-col :span=\"24\">\r\n          <div class=\"title\"><span>{{$t('直通设置')}}</span></div>\r\n          <div class=\"title\"><span>{{$t('用于设置HDMI输入是否直通输出')}}</span></div>\r\n          </el-col>\r\n          \r\n      </el-row>\r\n        <el-row :gutter=\"16\" style=\"height:100%;margin-right: 0;\">\r\n        \t<div style=\"width: 10%;\" >\t\r\n\t\t\t\t  <el-switch\r\n\t\t\t\t  v-model=\"status\"\r\n\t\t\t\t  @change='changestatus'\r\n\t\t\t\t  class='posi'\r\n\t\t\t\t  active-color=\"#ccc\"\r\n\t\t\t\t  inactive-color=\"#ff4949\">\r\n\t\t\t\t</el-switch>\r\n        \t</div>\r\n\t\t\t\t        \r\n            <!--<el-col :span=\"12\" style=\"height:100%;\">\r\n                <div class=\"managetools\">\r\n                    <el-button type=\"primary\" class=\"recovernode\" @click=\"nodeReset\">{{$t('复位')}}</el-button>\r\n                    <el-button @click=\"subSet\" type=\"primary\">{{$t('设置/取消编码直通')}}</el-button>\r\n                </div>\r\n                <div class=\"nodetree\">\r\n                    <el-tree\r\n                            ref=\"chkbox\"\r\n                            :default-expanded-keys=\"[0, -1, -2]\"\r\n                            node-key=\"ID\"\r\n                            :data=\"baseData\"\r\n                            :props=\"defaultProps\"\r\n                            highlight-current\r\n                            show-checkbox\r\n                            @check-change=\"onChkChange\"\r\n                            accordion>\r\n                    </el-tree>\r\n                </div>\r\n            </el-col>\r\n            <el-col :span=\"12\" style=\"height:100%;\">\r\n                <div></div>-->\r\n                \r\n                <el-table\r\n    ref=\"multipleTable\"\r\n    :data=\"tabledata\"\r\n    tooltip-effect=\"dark\"\r\n    style=\"width: 100%\"\r\n    height=\"100%\"\r\n    @selection-change=\"handleSelectionChange\">\r\n    \r\n    <el-table-column\r\n      type=\"selection\"\r\n      width=\"55\">\r\n    </el-table-column>\r\n    <el-table-column\r\n      label=\"设备列表\"\r\n      min-width=\"85%\">\r\n      <template slot-scope=\"scope\">{{ scope.row.IP }}</template>\r\n    </el-table-column>\r\n    \r\n    \r\n    \r\n    <el-table-column\r\n      prop=\"name\"\r\n      label=\"总开\"\r\n       min-width=\"5%\">\r\n       <template slot-scope=\"scope\">\r\n        <el-button\r\n          type=\"text\"\r\n          size=\"small\">\r\n       \t\t 开\r\n        </el-button>\r\n      </template>\r\n    </el-table-column>\r\n    \r\n    <el-table-column\r\n       min-width=\"5%\">\r\n      <template slot-scope=\"scope\">\r\n      \t<el-switch\r\n  v-model=\"scope.row.DirectConn\"\r\n  active-color=\"#ccc\"\r\n  inactive-color=\"#ff4949\">\r\n</el-switch></template>\r\n    </el-table-column>\r\n    \r\n    <el-table-column\r\n      prop=\"name\"\r\n      label=\"总关\"\r\n       min-width=\"5%\">\r\n       <template slot-scope=\"scope\">\r\n        <el-button\r\n          type=\"text\"\r\n          size=\"small\">\r\n        \t\t关\r\n        </el-button>\r\n      </template>\r\n    </el-table-column>\r\n    \r\n  </el-table>\r\n            </el-col>\r\n        </el-row>\r\n    </div>\r\n</template>\r\n<script>\r\n\r\n    export default {\r\n        data () {\r\n            return {\r\n                defaultProps: {\r\n                    children: 'children',\r\n                    label: 'title',\r\n                },\r\n                baseData: [{\r\n                    ID: 0,\r\n                    title: this.$t('节点分支'),\r\n                    children: [{\r\n                        ID: -1,\r\n                        title: this.$t('输入节点'),\r\n//                    expand: true,\r\n//                    disabled: true,\r\n                    }, {\r\n                        ID: -2,\r\n                        title: this.$t('输出节点'),\r\n                        children: [],\r\n//                    expand: true,\r\n//                    checked: true,\r\n                    }]\r\n                }],\r\n              outputNode1: [],     //输出节点\r\n                chkedNodes: [],  //被选中的节点\r\n                status:false,\r\n                tabledata: [\r\n               \t\t{\r\n\t\t\t          \tIP: '2016-05-03',\r\n\t\t\t        \tDirectConn:false\r\n\t\t\t        }\r\n                ]\r\n\t\t\t            }\r\n\t\t\t        },\r\n        created(){\r\n            this.list()\r\n        },\r\n        methods: {\r\n        \t//总开、总关\r\n        \tchangestatus:function(){\r\n\t\t\tlet set1 = new Set()\r\n\t\t\tconsole.log(\"111\")\r\n//      \t\tthis.status=!this.status\r\n        \t\tfor(var i=0;i<this.tabledata.length;i++){\r\n        \t\t\tthis.tabledata[i].DirectConn=this.status\r\n\t\t\t\t\tset1.add(this.tabledata[i].IP)\t\t\t\t\r\n        \t\t}\r\n        \t\tthis.setDirect(this.status ? 0 :1, Array.from(set1 ) )\r\n        \t},\r\n        \t\r\n        \t\r\n      toggleSelection(rows) {\r\n        if (rows) {\r\n          rows.forEach(row => {\r\n            this.$refs.multipleTable.toggleRowSelection(row);\r\n          });\r\n        } else {\r\n          this.$refs.multipleTable.clearSelection();\r\n        }\r\n      },\r\n      handleSelectionChange(val) {\r\n//    \tconsole.log(val,this.multipleSelection)\r\n        this.multipleSelection = val;\r\n        console.log(val)\r\n      },\r\n            /**\r\n             * 节点列表\r\n             */\r\n            list: function () {\r\n                var url = '/api.v2.do.node.get'\r\n                var params = {\r\n                    \"userid\": this.$auth.getuid(),\r\n                    \"page\": {\"start\":0,\"limit\":0},\r\n                }\r\n                this.$http(url, params).then((res) => {\r\n                    if(res.data.status != 0) {\r\n                        this.$message({\r\n                            'type': 'error',\r\n                            'message': this.$t('获取节点失败'),\r\n                            'showClose': true,\r\n                            'duration': 1500\r\n                        })\r\n                        return\r\n                    }\r\n                    if(res.data.msg && res.data.msg.body) {\r\n                        this.tabledata = this._fmtData(res.data.msg.body)\r\n                        for(var i=0;i<this.tabledata.length;i++){\r\n                        \tif(this.tabledata[i].DirectConn == 0){\r\n                        \t\tthis.tabledata[i].DirectConn=true\r\n                        \t}else{\r\n                        \t\tthis.tabledata[i].DirectConn=false\r\n                        \t}\r\n                        }\r\n                    } else {\r\n                        this.tabledata = this._fmtData([])\r\n                    }\r\n                    this._appendTree()\r\n                }).catch((err) => {})\r\n            },\r\n\r\n            nodeReset: function() {\r\n                var resetNodes = this.chkedNodes.filter((val ) => !!val.Type )\r\n                let set = new Set()    \r\n                if(resetNodes.length > 0 ){    \r\n                    resetNodes.map(v => set.add(v.IP))\r\n                }\r\n                \r\n                var url = 'api.v2.do.node.reboot'\r\n                var params = {\r\n                    \"userid\": this.$auth.getuid(),\r\n                    \"body\": {\r\n                        \"IP\": Array.from(set)\r\n                    }\r\n                }\r\n                this.$http(url, params).then((res) => {\r\n                    if(res.data.status != 0) {\r\n                        this.$message({\r\n                            'type': 'error',\r\n                            'message': this.$t(\"设备重启失败\"),\r\n                            'showClose': true,\r\n                            'duration': 1500\r\n                        })\r\n                        return\r\n                    }\r\n                    this.$message({\r\n                        'type': 'success',\r\n                        'message': this.$t('设备正在重启中'),\r\n                        'showClose': true,\r\n                        'duration': 1500\r\n                    })\r\n                }).catch((err) => {})\r\n            },\r\n\r\n            /**\r\n             * 设置取消编码直通\r\n             * @param isDirect : 0/1\r\n             * @param nodeIpArr: [ip1, ip2, ... ]\r\n             */\r\n            setDirect: function (isDirect, nodeIpArr) {\r\n                var url = '/api.v2.do.node.directornot'\r\n                var params = {\r\n                    \"userid\": this.$auth.getuid(),\r\n                    \"body\": {\r\n                        \"DirectConn\": isDirect, \r\n                        \"IP\": nodeIpArr \r\n                    }\r\n                }\r\n                this.$http(url, params).then((res) => {\r\n                        if(res.data.status == 0 ){\r\n                            //刷新树节点\r\n                            this.list()\r\n                            this.$message({\r\n                                'message': this.$t(\"设置成功\"), \r\n                                'type': 'success',\r\n                                'showClose': true,\r\n                                'duration': 1500 \r\n                            })\r\n                        }else{\r\n                            this.$message({\r\n                                'message': this.$t(\"设置失败\"), \r\n                                'type': 'error',\r\n                                'showClose': true,\r\n                                'duration': 1500 \r\n                            })\r\n                        }\r\n                }).catch((err) => { console.log(err) })\r\n            },\r\n\r\n            /**\r\n             * 点击触发设置、取消编码直通\r\n             */\r\n            subSet() {\r\n                var directNodes = this.chkedNodes.filter((val ) => val.DirectConn == 1 ),\r\n                    notDirectNodes = this.chkedNodes.filter((val ) => val.DirectConn == 0 )\r\n                if(directNodes.length > 0 ){\r\n                    let set1 = new Set()\r\n                    directNodes.map(v => set1.add(v.IP))\r\n                    this.setDirect(0, Array.from(set1 ) )\r\n\r\n                }\r\n\r\n                if(notDirectNodes.length > 0 ){\r\n                    let set2 = new Set()\r\n                    notDirectNodes.map(v => set2.add(v.IP))\r\n                    this.setDirect(1, Array.from(set2 ) )\r\n\r\n                }\r\n\r\n            },\r\n\r\n            /**\r\n             * 选中节点变化时触发 记录当前被选中的节点\r\n             */\r\n            onChkChange: function () {\r\n                this.chkedNodes = this.$refs.chkbox.getCheckedNodes()\r\n            },\r\n\r\n            /**\r\n             * 格式化数据\r\n             */\r\n            _fmtData: function (dt ) {\r\n                var rtnDt = []\r\n                for(var i in dt ){ dt[i].title = dt[i].IP;  rtnDt.push(dt[i]) }\r\n                return rtnDt\r\n            },\r\n\r\n            /**\r\n             * 增加树节点\r\n             * @private\r\n             */\r\n            _appendTree: function () {\r\n                var tmp = this.outputNode\r\n                tmp.map((val ) => {if(val.DirectConn){val.title += '(' + this.$t('直通') + ')'} return val } )\r\n                this.baseData[0].children[1].children = tmp\r\n                this.baseData[0].children[1].expand = true\r\n            },\r\n        },\r\n    }\r\n</script>\r\n\n\n\n// WEBPACK FOOTER //\n// nodemanage.vue?7cd4ecad","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?minimize!./~/vue-loader/lib/style-compiler?{\"id\":\"data-v-4a67829d\",\"scoped\":false,\"hasInlineConfig\":false}!./~/autoprefixer-loader!./~/less-loader!./src/views/system/systemsetting/styles/nodemanage.less\n// module id = 866\n// module chunks = 11","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"nodemanage\"\n  }, [_c('el-row', [_c('el-col', {\n    attrs: {\n      \"span\": 24\n    }\n  }, [_c('div', {\n    staticClass: \"title\"\n  }, [_c('span', [_vm._v(_vm._s(_vm.$t('直通设置')))])]), _vm._v(\" \"), _c('div', {\n    staticClass: \"title\"\n  }, [_c('span', [_vm._v(_vm._s(_vm.$t('用于设置HDMI输入是否直通输出')))])])])], 1), _vm._v(\" \"), _c('el-row', {\n    staticStyle: {\n      \"height\": \"100%\",\n      \"margin-right\": \"0\"\n    },\n    attrs: {\n      \"gutter\": 16\n    }\n  }, [_c('div', {\n    staticStyle: {\n      \"width\": \"10%\"\n    }\n  }, [_c('el-switch', {\n    staticClass: \"posi\",\n    attrs: {\n      \"active-color\": \"#ccc\",\n      \"inactive-color\": \"#ff4949\"\n    },\n    on: {\n      \"change\": _vm.changestatus\n    },\n    model: {\n      value: (_vm.status),\n      callback: function($$v) {\n        _vm.status = $$v\n      },\n      expression: \"status\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-table', {\n    ref: \"multipleTable\",\n    staticStyle: {\n      \"width\": \"100%\"\n    },\n    attrs: {\n      \"data\": _vm.tabledata,\n      \"tooltip-effect\": \"dark\",\n      \"height\": \"100%\"\n    },\n    on: {\n      \"selection-change\": _vm.handleSelectionChange\n    }\n  }, [_c('el-table-column', {\n    attrs: {\n      \"type\": \"selection\",\n      \"width\": \"55\"\n    }\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"label\": \"设备列表\",\n      \"min-width\": \"85%\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function(scope) {\n        return [_vm._v(_vm._s(scope.row.IP))]\n      }\n    }])\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"name\",\n      \"label\": \"总开\",\n      \"min-width\": \"5%\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function(scope) {\n        return [_c('el-button', {\n          attrs: {\n            \"type\": \"text\",\n            \"size\": \"small\"\n          }\n        }, [_vm._v(\"\\n       \\t\\t 开\\n        \")])]\n      }\n    }])\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"min-width\": \"5%\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function(scope) {\n        return [_c('el-switch', {\n          attrs: {\n            \"active-color\": \"#ccc\",\n            \"inactive-color\": \"#ff4949\"\n          },\n          model: {\n            value: (scope.row.DirectConn),\n            callback: function($$v) {\n              _vm.$set(scope.row, \"DirectConn\", $$v)\n            },\n            expression: \"scope.row.DirectConn\"\n          }\n        })]\n      }\n    }])\n  }), _vm._v(\" \"), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"name\",\n      \"label\": \"总关\",\n      \"min-width\": \"5%\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function(scope) {\n        return [_c('el-button', {\n          attrs: {\n            \"type\": \"text\",\n            \"size\": \"small\"\n          }\n        }, [_vm._v(\"\\n        \\t\\t关\\n        \")])]\n      }\n    }])\n  })], 1)], 1)], 1)\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (module.hot) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-loader/node_modules/vue-hot-reload-api\").rerender(\"data-v-4a67829d\", module.exports)\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-4a67829d\"}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/views/system/systemsetting/nodemanage.vue\n// module id = 899\n// module chunks = 11"],"sourceRoot":""}